# ============================================
# HOW TO PUSH FROM LOCAL GIT TO GITHUB
# ============================================

## PREREQUISITES
# Before pushing, you need:
# 1. A GitHub account
# 2. Git installed on your computer
# 3. Files committed to your local git repository

## STEP 1: Create a Repository on GitHub
# -------------------------------------
# 1. Go to https://github.com
# 2. Sign in to your account
# 3. Click the + icon (top right) → New repository
# 4. Name your repository (e.g., "my-project")
# 5. Choose Public or Private
# 6. DON'T initialize with README (if you already have local commits)
# 7. Click "Create repository"

## STEP 2: Connect Your Local Git to GitHub
# ------------------------------------------
# After creating the repository, GitHub shows you commands to run

# Add GitHub as the remote origin (replace with YOUR repository URL)
git remote add origin https://github.com/YOUR-USERNAME/YOUR-REPO-NAME.git

# Example:
# git remote add origin https://github.com/hpers/my-project.git

# Verify the remote was added
git remote -v

## STEP 3: Rename Your Branch to Main (if needed)
# ------------------------------------------------
# GitHub uses "main" as the default branch name
git branch -M main

## STEP 4: Push Your Code to GitHub
# ----------------------------------
# Push your commits to GitHub for the first time
git push -u origin main

# The -u flag sets "origin main" as the default, so future pushes just need:
# git push

## STEP 5: Authenticate with GitHub
# ----------------------------------
# When you push, you'll be asked to sign in

# Option A: Use Personal Access Token (Recommended)
# 1. Go to GitHub.com → Settings → Developer settings
# 2. Click "Personal access tokens" → "Tokens (classic)"
# 3. Click "Generate new token (classic)"
# 4. Give it a name (e.g., "VS Code")
# 5. Select "repo" scope (full control of repositories)
# 6. Click "Generate token"
# 7. COPY the token immediately (you won't see it again!)
# 8. Use this token as your password when pushing

# Option B: GitHub Desktop or GitHub CLI
# These provide easier authentication


## PUSHING FUTURE CHANGES
# ------------------------
# After the initial setup, pushing updates is simple:

# 1. Make changes to your files
# 2. Save the files

# 3. Stage the changes
git add .

# 4. Commit with a message
git commit -m "Describe your changes"

# 5. Push to GitHub
git push


## USING VS CODE SOURCE CONTROL UI
# ---------------------------------

# Initial Push:
# 1. Open Source Control (Ctrl+Shift+G)
# 2. Click the "..." menu → Remote → Add Remote
# 3. Paste your GitHub repository URL
# 4. Click "Publish Branch" button
# 5. Sign in to GitHub when prompted

# Future Pushes:
# 1. Make changes and save
# 2. Open Source Control (Ctrl+Shift+G)
# 3. Stage files (click + icon)
# 4. Write commit message
# 5. Click ✓ to commit
# 6. Click "Sync Changes" button (⟳)


## VERIFY YOUR PUSH
# ------------------
# 1. Go to your repository on GitHub.com
# 2. Refresh the page
# 3. You should see your files uploaded
# 4. Check the commit history to see your commits


## COMMON COMMANDS REFERENCE
# ---------------------------

# Add remote repository
git remote add origin URL

# View remote repositories
git remote -v

# Push to GitHub (first time)
git push -u origin main

# Push updates (after initial push)
git push

# Pull changes from GitHub
git pull

# Check branch name
git branch

# Rename branch to main
git branch -M main

# Remove remote (if you need to change it)
git remote remove origin


## TROUBLESHOOTING
# ----------------

# Error: "remote origin already exists"
git remote remove origin
git remote add origin YOUR-GITHUB-URL

# Error: "failed to push some refs"
# This means GitHub has changes you don't have locally
git pull origin main --rebase
git push origin main

# Error: "authentication failed"
# Make sure you're using a Personal Access Token, not your password

# Error: "repository not found"
# Check the URL is correct
# Make sure you have access to the repository


## COMPLETE WORKFLOW EXAMPLE
# ---------------------------

# 1. Create files and make changes locally

# 2. Initialize git (if not done)
git init

# 3. Add and commit
git add .
git commit -m "Initial commit"

# 4. Create repository on GitHub

# 5. Connect to GitHub
git remote add origin https://github.com/hpers/my-project.git

# 6. Rename branch
git branch -M main

# 7. Push to GitHub
git push -u origin main

# 8. For future changes:
git add .
git commit -m "Update files"
git push


## BEST PRACTICES
# ---------------

# ✅ Commit often with clear messages
# ✅ Pull before you push (if working with others)
# ✅ Use .gitignore to exclude sensitive files
# ✅ Keep commits small and focused
# ✅ Write descriptive commit messages
# ✅ Push regularly to back up your work


## SUMMARY
# --------
# Pushing to GitHub involves:
# 1. Create a GitHub repository
# 2. Connect your local git to GitHub (git remote add origin)
# 3. Push your code (git push -u origin main)
# 4. Authenticate with a Personal Access Token
# 5. Future pushes are just: git add, git commit, git push

# Remember: Your code is now backed up and shareable on GitHub!